package projetCSI2510_300209487;

import java.util.ArrayList;
import java.util.List;

public class CustomPriorityQueue {

	//les elements avec la plus petite Queue sont au debut  de la liste
	public List<Entry> Queue = new ArrayList<Entry>();
	
	private int size ;
	
	
	int size() 
	{
		return size;
	};

	/**
	 * Tests whether the priority queue is empty.
	 * @return true if the priority queue is empty, false otherwise
	 */
	boolean isEmpty() 
	{
		if(size==0) {return true ;} else {return false ;}
	};

	/**
	 * Inserts a key-value pair and returns the entry created.
	 * @param key     the key of the new entry
	 * @param value   the associated value of the new entry
	 * @return the entry storing the new key-value pair
	 * @throws IllegalArgumentException if the key is unacceptable for this queue
	 */
	//Entry <K, V>insert( K key, V value ) throws IllegalArgumentException;
	
	public  boolean insert(int k,int e) 
	{
		Entry temporaire = new Entry(k,e);
		boolean ok = false  ;
		if (this.isEmpty())
		{
			Queue.add(temporaire); size++;
			return true ;
		}
		else // rechercher la bonne position pour l'insertion 
		{
			//int i =0 ;
			//la priorite du nouvel element est plus grande// on continue  
			for (int i =0 ; i < size ; i++) 
			{
				if (temporaire.getKey() < Queue.get(i).getKey()) 
				{
					Queue.set(i,temporaire);size++; ok = true; break ;
				}
			}
			if (ok) {return true; }
			else {
				Queue.add(temporaire); return true ;
			}
			//la priorite est plus petite 
		}
	}

	/**
	 * Returns (but does not remove) an entry with minimal key.
	 * @return entry having a minimal key (or null if empty)
	 */
	//Entry <K, V>min();

	/**
	 * Removes and returns an entry with minimal key.
	 * @return the removed entry (or null if empty)
	 */
	//Entry <K, V>removeMin();
	
	
	public static void main(String[] args) {
		CustomPriorityQueue a = new CustomPriorityQueue();
		//a.insert(0,5);
		a.insert(10, 8);
	    a.insert(7, 6);
		for (int i =0 ; i< a.size() ; i++) 
		{
			System.out.println(a.Queue.get(i).getValue());
		}
		
		
	}
	
}
